//------------------------------------
//    $MIXINS
//------------------------------------

// Vendor prefix
=vendor($property, $value)
  -webkit-#{$property}: $value
  -moz-#{$property}: $value
  -ms-#{$property}: $value
  -o-#{$property}: $value
  #{$property}: $value

// Animation
//
// keyframe(fadeIn)
//      0%
//          opacity: 0
//      100%
//            opacity: 100%
//
=keyframe($animation-name)
  @-webkit-keyframes #{$animation-name}
    @content

  @-moz-keyframes #{$animation-name}
    @content

  @-ms-keyframes #{$animation-name}
    @content

  @-o-keyframes #{$animation-name}
    @content

  @keyframes #{$animation-name}
    @content



// Create REM values with PX fall back
//
// Generate a REM with PX fallback from
// $baseFontSize. Enter the desired size based
// on pixels in numerical form. Supports shorthand.
//
// Forked from: http://codepen.io/thejameskyle/pen/JmBjc
//
// @author Greg Rickaby
// @since 1.0
//
// Usage: +rem($property, $values)
// Example Usage:
//    +rem(font-size, 16px)
//    +rem(margin, 0 24px 0 12px)
//
// Outputs:
//    font-size: 16px
//    font-size: 1.6rem
//    margin: 0 24px 0 12px
//    margin: 0 2.4rem 0 1.2rem
// ----------------------------------
// I've set html reset 62.5%, so it's calcurated as 10px.
$baseFontSizeInHtml: 10

@function parseInt($n)
  @return $n / ($n * 0 + 1)

=rem($property, $values)
  $px : ()
  $rem: ()

  $root: $baseFontSizeInHtml

  @each $value in $values
    @if $value == 0 or $value == auto
      $px : append($px , $value)
      $rem: append($rem, $value)

    @else if type-of($value) == number
      $unit: unit($value)
      $val: parseInt($value)

      @if $unit == "px"
        $px : append($px,  $value)
        $rem: append($rem, ($val / $root + rem))

      @if $unit == "rem"
        $px : append($px,  ($val * $root + px))
        $rem: append($rem, $value)

    @else
      $px : append($px,  $value)
      $rem: append($rem, $value)

  @if $px == $rem
    #{$property}: $px
  @else
    #{$property}: $px
    #{$property}: $rem

@function rem($value)
  $root: $baseFontSize
  $val: parseInt($value)
  $return: ()

  @if unit($value) == "px"
    $return: append($return, ($val / $root + rem))
  @else
    $return: append($return, ($val * $root + px))
  @return $return



//
// Force overly long spans of text to truncate, e.g.:
//
//    `+truncate(100%)`
//
// Where `$truncation-boundary` is a united measurement.
//
=truncate($truncation-boundary)
  max-width: $truncation-boundary
  white-space: nowrap
  overflow: hidden
  text-overflow: ellipsis



// WebKit-style focus
=tab-focus
  // Default
  outline: thin dotted
  // WebKit
  outline: 5px auto -webkit-focus-ring-color
  outline-offset: -2px


//
// Arrow
//
// You pass this position in along with a desired arrow color and optional
// border color, e.g.:
//
// `+arrow(top, left, red)`
//
// for just a single, red arrow, or:
//
// `+arrow(bottom, center, red, black)`
//
// which will create a red triangle with a black border which sits at the
// bottom center of the element. Call the mixin thus:
//
//    .foo
//        background-color: #BADA55
//        border: 1px solid #ACE
//        +arrow(top, left, #BADA55, #ACE)
//
=arrow($arrow-edge, $arrow-location, $arrow-color, $border-color: $arrow-color)
  @if $arrow-edge == top
    @extend %arrow--top
    &:before
      border-bottom-color: $border-color!important
    &:after
      border-bottom-color: $arrow-color!important
    @if $arrow-location == left
      @extend %arrow--left
    @if $arrow-location == center
      @extend %arrow--right

  @if $arrow-edge == right
    @extend %arrow--far
    &:before
      border-left-color: $border-color!important
    &:after
      border-left-color: $arrow-color!important
    @if $arrow-location == top
      @extend %arrow--upper
    @if $arrow-location == center
      @extend %arrow--middle
    @if $arrow-location == bottom
      @extend %arrow--lower

  @if $arrow-edge == bottom
    @extend %arrow--bottom
    &:before
      border-top-color: $border-color!important
    &:after
      border-top-color: $arrow-color!important
    @if $arrow-location == left
      @extend %arrow--left
    @if $arrow-location == center
      @extend %arrow--center
    @if $arrow-location == right
      @extend %arrow--right

  @if $arrow-edge == left
    @extend %arrow--near
    &:before
      border-right-color: $border-color!important
    &:after
      border-right-color: $arrow-color!important
    @if $arrow-location == top
      @extend %arrwo--upper
    @if $arrow-location == center
      @extend %arrow--middle
    @if $arrow-location == bottom
      @extend %arrow--lower

//
// Media query mixin.
//
// Example:
// `+breakpoint(lap)`
//


=breakpoint($breakpoint)
  @if $breakpoint == lap
    @media only screen and (min-width: $lap-start)
      @content
  @if $breakpoint == desk
    @media only screen and (min-width: $desk-start)
      @content

  @if $breakpoint == desk-wide
    @media only screen and (min-width: $desk-wide-start)
      @content
